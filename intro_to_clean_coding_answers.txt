EXERCISES:

1. In your own words, explain what clean code is and why it is important.

Answer: Clean code is essentially writing code that is both readable and maintainable.  It is important because it
can make it far easier for both you and other developers to follow your work.  The amount of time a programmer spends
reading versus writing code is a ratio of 10:1.  So if one does not write clean code, it can be far harder and more time
consuming to decipher the code.  Although it may take slightly longer to write clean code, in a project, it can make
your time spent working much more efficient, as bugs can be more easily seen and one will have more of a clear idea how
all of the code fits together.

/////////////////////////////////////////////////////////////////////////////////////////////////////////

2.  Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics
discussed, think about another commonly used object that relies on computers and explain what would happen if the code
was not created to an acceptable standard.

Answer: Intuitive Surgical's Da Vinci system is used in surgical robotics.  If code for this was not created to an acceptable
standard, it could potentially lead to a catastrophic surgical error.

/////////////////////////////////////////////////////////////////////////////////////////////////////////

3.  Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

Answer: I would not consider the above to be clean code since the naming could be better.  By glancing at the code and
using the squint test, it is clear that the code is not self-documenting.  Because the naming is not good, comments seem
to be added in to give clarity.  It is apparent that the code needs better naming so a plethora of comments are not needed.

Refactored Code:

FUNCTION convertTemperature(degrees, temperatureScale)
 IF temperatureScale = "Fahrenheit" THEN
 SET celsiusTemperature to (degrees−32) * (5/9)
 PRINT celsiusTemperature
 ELSE IF temperatureScale = "Celsius" THEN
 SET fahrenheitTemperature to degrees * 1.8000 + 32.00
 PRINT fahrenheitTemperature
 END IF
END FUNCTION

/////////////////////////////////////////////////////////////////////////////////////////////////////////

4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

Answer:  I would consider the above code to be clean code. I did the squint test on it and immediately could tell what
the code was trying to accomplish.  The function was named well, as were the parameters and variables.  The code was
self-documented effectively and also used no commentary.

/////////////////////////////////////////////////////////////////////////////////////////////////////////

5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

Answer with Refactored Code:

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
  let totalAmount = subTotal * discountRate + (subTotal * tax)
  IF paymentType = 'CASH' THEN
    CALL getPayment RETURNING amount
    PRINT "Change due: " + amount - totalAmount
  ELSE IF paymentType = 'CREDIT CARD' THEN
    CALL getPayment RETURNING amount
    PRINT "Your credit card has been charged: " + totalAmount
  END IF
END FUNCTION

/////////////////////////////////////////////////////////////////////////////////////////////////////////

5b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

Answer with Refactored Code:

IF guest.hasOverdueBooks THEN
  PRINT guest + "has overdue books that must be returned."
ELSE IF guest.outstandingFees > 0 THEN
  PRINT guest + "has fees outstanding that need to be paid."
ELSE IF guest.accountActive THEN
  APPEND book to guest.books
  SET book.status to "Checked Out"
  PRINT "Your books have been issued."
ELSE
  PRINT "Unable to check out book."
END IF
END FUNCTION

/////////////////////////////////////////////////////////////////////////////////////////////////////////

5c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

Answer with Refactored Code:

CLASS Balance
  FUNCTION displayBalance
    PRINT balance
  END FUNCTION
END CLASS

CLASS Deposit
  FUNCTION depositCash(amount)
    SET balance to balance + amount
  END FUNCTION
END CLASS

CLASS Withdraw
  FUNCTION withdraw(amount)
    IF balance > amount THEN
      SET balance to balance - amount
    END
  END FUNCTION
END CLASS

CLASS CreditCard
  FUNCTION creditCardOffer
    IF NOT(customer.hasCreditCard) THEN
      CALL offerCreditCard
    END
  END FUNCTION
END CLASS

CLASS Status
  FUNCTION checkStatus
    IF NOT(customer.hasCheckingAccount) THEN
      CALL offerCheckingAccount
    END
  END FUNCTION
END CLASS

/////////////////////////////////////////////////////////////////////////////////////////////////////////

Programming Questions
You may do the following problems in any language of your choice.
Use the clean code principles taught in this section while writing the code.

6. Square Given an array of integers, find out whether the sum of the integers is a perfect square.
If it is a perfect square, return the square root, otherwise return the sum.

Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.

Answer:

function findPerfectSquare(arr) {
  let sum = 0;
  for(let i=0; i<arr.length; i++) {
    sum += arr[i];
  }
  let squareRoot = Math.sqrt(sum);
  if(squareRoot - Math.floor(squareRoot) === 0) {
    return squareRoot;
  }
  else {
    return sum;
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////

7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements.
The function should return true if any value appears at least twice in the array, and false if every element is distinct.

Answer:

function findDuplicate(arr) {
  for(let i=0; i<arr.length; i++) {
    for(let j=0; j<arr.length; j++) {
      if(i !== j && arr[i] === arr[j]) {
        return true;
      }
    }
  }
  return false;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////

Extra Credit
8. Anagram An anagram is a word, phrase, or name formed by rearranging the letters of another word.
For example, spar can be formed from rasp. Given two strings, stringOne and stringTwo, determine if stringOne
is an anagram of stringTwo. Assume that the strings contain only lowercase letters and do not worry about case-sensitivity.
Hint: Your first task will be to convert the strings to arrays.

Answer:

function checkAnagram(stringOne, stringTwo) {
  let string1 = stringOne.split('').sort().join('');
  let string2 = stringTwo.split('').sort().join('');

  if(string1 === string2) {
    return true;
  } else {
    return false;
  }
}
